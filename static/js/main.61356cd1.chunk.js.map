{"version":3,"sources":["util/api.js","components/Stars/stars.tsx","components/GameBar/gamebar.tsx","components/Room/room.tsx","components/RoomBuildButton/roombuildbutton.tsx","components/RoomBuildMenu/roombuildmenu.tsx","components/NewRoomButton/NewRoomButton.tsx","components/Floor/floor.tsx","components/NewFloorButton/NewFloorButton.tsx","components/Elevator/elevatorcar.tsx","components/Elevator/elevator.tsx","components/Tower/tower.tsx","components/Game/game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["url","buildFloor","towerName","floorNumber","console","log","parseInt","axios","getTower","a","getPopulation","getMoney","endMonth","getFloorRooms","floorId","buildRoomOnFloor","roomName","roomType","roomRent","roomMaintenance","roomHappiness","body","maintenance","happiness","rent","Stars","props","hackArray","Array","index","stars","push","map","hack","key","className","GameBar","state","money","this","gameState","starLevel","population","onClick","endMonthHandler","React","Room","setAnchorEl","type","event","currentTarget","RoomBuildButton","clickHandler","RoomBuildMenu","from","roomTypeList","NewRoomButton","anchorEl","aria-controls","aria-haspopup","Menu","id","keepMounted","open","Boolean","onClose","api","require","Floor","number","rooms","_id","showMenu","toggleMenu","setState","componentDidMount","floor","data","addRoom","newRoomName","newRoomType","newFloor","updateGameState","room","name","tenants","availableRoomTypes","NewFloorButton","ElevatorCar","elevatorMaxHeight","towerHeight","toString","eleveatorDuration","useState","on","toggle","animation","useSpring","config","duration","bottom","div","style","Example","posed","hidden","transition","visible","isVisible","position","Component","Tower","floors","floorsAdded","addFloor","length","topFloor","newFloors","towerJson","newlyBuiltFloor","forEach","handleUpdateGameState","alert","handleAddFloor","res","sort","b","Game","Set","pop","newStarLevel","getStarLevel","roomsAvailable","getAvailableRooms","add","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61356cd1.chunk.js","sourcesContent":["import * as axios from 'axios'\r\nconst url = 'https://wokelordserver.herokuapp.com'\r\n\r\nexport function buildFloor(towerName, floorNumber) {\r\n    console.log(\"Attempting to build a floor...\" + floorNumber);\r\n    floorNumber = parseInt(floorNumber);\r\n    return axios.post(url + `/game/buildfloor/${towerName}/${floorNumber}`)\r\n}\r\n\r\nexport async function getTower(towerName) {\r\n    return axios.get(url + `/game/loadtower/${towerName}`)\r\n}\r\n\r\nexport async function getPopulation(towerName) {\r\n    return axios.get(url + `/game/getpopulation/${towerName}`)\r\n}\r\n\r\nexport async function getMoney(towerName) {\r\n    return axios.get(url + `/game/getmoney/${towerName}`)\r\n}\r\n\r\nexport async function endMonth(towerName) {\r\n    return axios.get(url + `/game/updatemonth/${towerName}`)\r\n}\r\n\r\nexport async function getFloorRooms(floorId) {\r\n    return axios.get(url + `/game/loadrooms/${floorId}`);\r\n}\r\n\r\nexport function buildRoomOnFloor(towerName, floorId, roomName, roomType, roomRent, roomMaintenance, roomHappiness) {\r\n    let body = {\r\n        roomName: roomName,\r\n        roomType: roomType,\r\n        maintenance: roomMaintenance,\r\n        happiness: roomHappiness,\r\n        rent: roomRent,\r\n    }\r\n    return (\r\n        axios.post(url + `/game/buildroom/${towerName}/${floorId}`, body)\r\n    );\r\n}","import React from 'react';\r\n\r\ninterface StarProps {\r\n    stars: number\r\n}\r\n\r\nconst Stars: React.FC<StarProps> = (props) => {\r\nlet hackArray = Array<any>();\r\n\r\nfor (let index = 0; index < props.stars; index++) {\r\n    hackArray.push(index);\r\n}\r\n\r\nreturn (\r\n    <span>\r\n        {hackArray.map((hack)=>{\r\n            return <i key={hack} className=\"fas fa-star\"></i>\r\n        })}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default Stars;","import * as React from 'react';\r\nimport './style.css';\r\nimport Stars from '../Stars/stars'\r\nimport { tsImportEqualsDeclaration } from '@babel/types';\r\n\r\nexport interface GamebarProps {\r\n    gameState: {\r\n        money: number,\r\n        population: number,\r\n        happiness: number,\r\n        starLevel: number,\r\n    },\r\n    endMonthHandler: any\r\n}\r\n\r\n// 'HelloProps' describes the shape of props.\r\n// State is never set so we use the '{}' type.\r\nexport default class GameBar extends React.Component<GamebarProps, {}> {\r\n    state = {\r\n        money: 0\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"gamebar\">\r\n                <div className=\"money gamebarItem\">\r\n                    <span>Funds: </span>\r\n                    {this.props.gameState.money}\r\n                </div>\r\n                <div className=\"happiness gamebarItem\">\r\n                    <span>Happiness: </span>\r\n                    {this.props.gameState.happiness}\r\n                </div>\r\n                <div className=\"gamebarItem\">\r\n                    <span>Star Level: <Stars stars={this.props.gameState.starLevel}></Stars></span>\r\n                </div>\r\n                <div className=\"gamebarItem\">\r\n                    <span>Population: </span>\r\n                    {this.props.gameState.population}\r\n                </div>\r\n                <button className=\"nextmonthbutton\" onClick={this.props.endMonthHandler}>Collect Rent $$$</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport './style.css';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport RoomContextmenu from '../RoomContextMenu/roomcontextmenu'\r\n\r\nexport interface RoomProps {\r\n    name: string,\r\n    tenants: any[],\r\n    floorId: string,\r\n    type: string,\r\n    _id: string,\r\n    rent: number,\r\n    maintenance: number,\r\n    happiness: number,\r\n}\r\n\r\nconst Room: React.FC<RoomProps> = (props) => {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    function handleClick(event: any) {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    function handleClose() {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    \r\n    return (\r\n        <div className={props.type} onClick={handleClick}></div>\r\n    )\r\n}\r\n\r\nexport default Room;","import React from 'react';\r\nimport './style.css';\r\n\r\ninterface RoomBuildButtonProps {\r\n  clickHandler: any\r\n  roomType: string,\r\n  roomName: string,\r\n}\r\n\r\nconst RoomBuildButton: React.FC<RoomBuildButtonProps> = (props) => {\r\n  const getRoomCost = () =>{\r\n    if(props.roomType===\"office\"){\r\n      return 5000;\r\n    }\r\n\r\n    if(props.roomType===\"condo\"){\r\n      return 20000;\r\n    }\r\n\r\n    if(props.roomType===\"apartment\"){\r\n      return 8000;\r\n    }\r\n\r\n    if(props.roomType===\"restaurant\"){\r\n      return 20000;\r\n    }\r\n\r\n    if(props.roomType===\"hotel\"){\r\n      return 5000;\r\n    }\r\n\r\n    if(props.roomType===\"cleaning\"){\r\n      return 10000;\r\n    }\r\n  }\r\n\r\n  const getRoomTenants = () =>{\r\n    if(props.roomType===\"office\"){\r\n      return 8;\r\n    }\r\n\r\n    if(props.roomType===\"condo\"){\r\n      return 4;\r\n    }\r\n\r\n    if(props.roomType===\"apartment\"){\r\n      return 3;\r\n    }\r\n\r\n    if(props.roomType===\"restaurant\"){\r\n      return 2;\r\n    }\r\n\r\n    if(props.roomType===\"hotel\"){\r\n      return 1;\r\n    }\r\n\r\n    if(props.roomType===\"cleaning\"){\r\n      return 4;\r\n    }\r\n  }\r\n  \r\n  \r\n  return (\r\n    <button className=\"newroombutton\" onClick={()=> props.clickHandler(props.roomName, props.roomType)}>{props.roomType}\r\n      <span className=\"tooltiptext\">\r\n        <p>Cost: {getRoomCost()}</p>\r\n        <p>Tenants: {getRoomTenants()}</p>\r\n        </span>\r\n      \r\n    </button>\r\n  );\r\n}\r\n\r\nexport default RoomBuildButton;\r\n","import React from 'react';\r\nimport RoomBuildButton from '../RoomBuildButton/roombuildbutton'\r\nimport './style.css';\r\n\r\ninterface RoomBuildMenuProps {\r\n    clickHandler: any,\r\n    roomTypeList: Set<string>\r\n}\r\n\r\nconst RoomBuildMenu: React.FC<RoomBuildMenuProps> = (props) => {\r\n\r\nreturn (\r\n    <div className=\"RoomBuildMenu\">\r\n        {Array.from(props.roomTypeList).map((roomType)=>{\r\n            return <RoomBuildButton key={roomType} clickHandler={props.clickHandler} roomType={roomType} roomName=\"Foo\">{roomType}</RoomBuildButton>\r\n        })}\r\n{/* \r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"office\"} roomName=\"Foo\"></RoomBuildButton>\r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"apartment\"} roomName=\"Foo\"></RoomBuildButton>\r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"entertainment\"} roomName=\"Foo\"></RoomBuildButton>\r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"restaurant\"} roomName=\"Foo\"></RoomBuildButton>\r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"condo\"} roomName=\"Foo\"></RoomBuildButton> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoomBuildMenu;\r\n","import * as React from 'react';\r\nimport './style.css'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport RoomBuildMenu from '../RoomBuildMenu/roombuildmenu';\r\n\r\ninterface NewRoomButtonProps {\r\n    clickHandler: any,\r\n    roomTypeList: Set<string>\r\n}\r\n\r\nconst NewRoomButton: React.FC<NewRoomButtonProps> = (props) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event: any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"newRoomButton\">\r\n      <button  aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n        +\r\n      </button>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n          <RoomBuildMenu roomTypeList={props.roomTypeList} clickHandler={props.clickHandler}></RoomBuildMenu>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewRoomButton;","import * as React from 'react';\r\nimport Room from '../Room/room';\r\nimport NewRoomButton from \"../NewRoomButton/NewRoomButton\";\r\nimport './style.css';\r\nimport { Modal, Dialog, DialogTitle, DialogContent, MenuItem, Menu } from '@material-ui/core';\r\nimport { throwStatement } from '@babel/types';\r\nconst api = require('../../util/api');\r\n\r\nexport interface FloorProps {\r\n    number: number;\r\n    _id: string,\r\n    towerName: string,\r\n    updateGameState: any,\r\n    availableRoomTypes: Set<string>\r\n}\r\n\r\n// State is never set so we use the '{}' type.\r\nexport default class Floor extends React.Component<FloorProps, {}> {\r\n    state = {\r\n        number: this.props.number,\r\n        rooms: Array<any>(),\r\n        _id: this.props._id,\r\n        showMenu: false,\r\n    }\r\n\r\n    toggleMenu = () => {\r\n        if (this.state.showMenu) {\r\n            this.setState({ showMenu: false })\r\n        } else {\r\n            this.setState({ showMenu: true })\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        let floor = await api.getFloorRooms(this.state._id);\r\n        console.log(\"Rooms Obj\");\r\n        console.log(floor);\r\n        this.setState({ rooms: floor.data[0].rooms });\r\n    }\r\n\r\n    addRoom = async (newRoomName: string, newRoomType: string) => {\r\n        let newRoomRent = 0;\r\n        let newRoomMaintenance = 0;\r\n        let newRoomHappiness = 0;\r\n        let newFloor = await api.buildRoomOnFloor(this.props.towerName, this.state._id, newRoomName, newRoomType, newRoomRent, newRoomMaintenance, newRoomHappiness);\r\n        console.log(newFloor);\r\n        let floor = await api.getFloorRooms(this.state._id);\r\n        console.log(\"New Floor Obj\");\r\n        console.log(floor);\r\n        this.setState({ rooms: floor.data[0].rooms });\r\n        this.props.updateGameState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"floor\">\r\n                <div className=\"rooms\">\r\n                {this.state.rooms.map((room) => {\r\n                    return (\r\n                        <Room\r\n                            name={room.name}\r\n                            type={room.type}\r\n                            tenants={room.tenants}\r\n                            floorId={this.state._id}\r\n                            _id={room._id}\r\n                            happiness={room.happiness}\r\n                            rent={room.rent}\r\n                            maintenance={room.maintenance}\r\n                            key={room._id}\r\n                        />\r\n                    )\r\n                })}\r\n                </div>\r\n                <NewRoomButton roomTypeList={this.props.availableRoomTypes} clickHandler={this.addRoom}></NewRoomButton>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport './style.css'\r\n\r\ninterface NewFloorProps {\r\n    onClick(): any\r\n}\r\n\r\nconst NewFloorButton: React.FC<NewFloorProps> = (props) => {\r\n\r\n    return (\r\n\r\n        <button className=\"newFloorButton\" onClick={props.onClick}>\r\n            <span className=\"tooltiptext\">Click to build a new floor for $100,000</span>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default NewFloorButton;","import React, { useState } from 'react';\r\nimport { useSpring, animated } from 'react-spring'\r\nimport './style.css'\r\n\r\nexport interface ElevatorCarProps {\r\n    towerHeight: number,\r\n}\r\n\r\nconst ElevatorCar: React.FC<ElevatorCarProps> = (props) => {\r\n    let towerSize = (props.towerHeight * 7) -6;\r\n    let elevatorMaxHeight = towerSize.toString() + \"em\";\r\n    let eleveatorDuration = props.towerHeight*1000;\r\n    // const Script: any = Keyframes.Spring(async (next: any) => {\r\n    //     while (true)\r\n\r\n    //         await next(\r\n    //             { bottom: 0, from: { bottom: elevatorMaxHeight }, reset: true }\r\n    //         )\r\n    // })\r\n\r\n    const [on, toggle] = useState(false);\r\n    \r\n    const animation = useSpring({ config: { duration: eleveatorDuration },\r\n         bottom: on ? elevatorMaxHeight : \"1em\"\r\n    })\r\n\r\n    return (\r\n\r\n        <div>\r\n            <animated.div onClick={() => toggle(!on)} className=\"elevatorCar\" style={animation}></animated.div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ElevatorCar;","import React from 'react';\r\nimport posed from 'react-pose'\r\nimport './style.css';\r\nimport ElevatorCar from './elevatorcar';\r\n\r\ninterface ElevatorProps {\r\n  clickHandler: any\r\n  position: string,\r\n  towerHeight: number,\r\n}\r\n\r\nconst Box = posed.div({\r\n  hidden: { bottom: 0, transition: { duration: 5000 } },\r\n  visible: { bottom: 2500, transition: { duration: 5000 } }\r\n});\r\n\r\nexport default class Example extends React.Component<ElevatorProps> {\r\n  state = { isVisible: true };\r\n\r\n  // componentDidMount() {\r\n  //   setInterval(() => {\r\n  //     this.setState({ isVisible: !this.state.isVisible });\r\n  //   }, 10000);\r\n  // }\r\n\r\n  render() {\r\n    const { isVisible } = this.state;\r\n    return (\r\n      <div className={this.props.position === \"left\" ? \"leftElevator\" : \"rightElevator\"}>\r\n        {/* <Box className=\"elevatorCar\" pose={isVisible ? 'visible' : 'hidden'} /> */}\r\n        <ElevatorCar towerHeight={this.props.towerHeight}></ElevatorCar>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component, useContext } from \"react\";\r\nimport Floor from '../Floor/floor';\r\nimport newFloorButton from '../NewFloorButton/NewFloorButton'\r\nimport './style.css';\r\nimport NewFloorButton from \"../NewFloorButton/NewFloorButton\";\r\nimport Elevator from \"../Elevator/elevator\"\r\nimport { getFloorRooms } from \"../../util/api\";\r\nconst api = require('../../util/api');\r\n\r\nexport interface TowerProps {\r\n    name: string,\r\n    updateGameState: any,\r\n    availableRoomTypes: Set<string>\r\n}\r\n\r\nexport default class Tower extends React.Component<TowerProps> {\r\n    state = {\r\n        floors: Array<any>(),\r\n        name: this.props.name,\r\n        money: 0,\r\n        floorsAdded: false,\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //callDB\r\n        let res = await api.getTower(this.state.name);\r\n\r\n        let newFloors = Array<any>();\r\n\r\n        if (res.data[0].floors) {\r\n            console.log(res.data[0].floors);\r\n            res.data[0].floors.forEach((floor: any) => {\r\n                newFloors.push(floor);\r\n            });\r\n        }\r\n        console.log(newFloors);\r\n\r\n        newFloors = newFloors.sort((a,b)=>{\r\n            return a.number - b.number;\r\n        })\r\n        console.log(newFloors);\r\n\r\n        this.setState({ floors: newFloors })\r\n    }\r\n\r\n    addFloor = async () => {\r\n        \r\n        if(this.state.floors.length < 20){\r\n            console.log(this.state.floors.length)\r\n        let topFloor: any = this.state.floors[this.state.floors.length - 1];\r\n        console.log(topFloor)\r\n        let newFloor;\r\n        if (topFloor) {\r\n            newFloor = topFloor.number + 1;\r\n        } else {\r\n            newFloor = 0;\r\n        }\r\n\r\n        let newFloors = Array<number>();\r\n        let towerJson = await api.buildFloor(this.state.name, newFloor);\r\n        console.log(\"Tower Json...\")\r\n        console.log(towerJson);\r\n\r\n        let newlyBuiltFloor = towerJson.data.floors[towerJson.data.floors.length-1];\r\n        console.log(newlyBuiltFloor)\r\n        this.state.floors.forEach((floor) => {\r\n            newFloors.push(floor);\r\n        })\r\n\r\n        newFloors.push(newlyBuiltFloor);\r\n        this.handleUpdateGameState();\r\n        this.setState({ floors: newFloors });\r\n        }else{\r\n            alert(\"You can't build any higher because you'd block some NIMBY's view... or rather you'd 'Change the character of the neighborhood'. Game over.\");\r\n        }\r\n    }\r\n\r\n    handleAddFloor = () => {\r\n        console.log(this)\r\n        this.addFloor();\r\n    }\r\n\r\n    handleUpdateGameState(){\r\n        this.props.updateGameState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"outerTower\">\r\n                <NewFloorButton onClick={this.addFloor}></NewFloorButton>\r\n                <div className=\"innerTower\">\r\n                    <Elevator towerHeight={this.state.floors.length} position=\"left\" clickHandler={() => { }}></Elevator>\r\n                    <div className=\"floors\">\r\n                        {this.state.floors.map((floor) => {\r\n                            return <Floor key={floor.number} availableRoomTypes={this.props.availableRoomTypes} number={floor.number} _id={floor._id} towerName={this.state.name} updateGameState={this.props.updateGameState}></Floor>\r\n                        })}\r\n                    </div>\r\n                    <Elevator towerHeight={this.state.floors.length} position=\"right\" clickHandler={() => { }}></Elevator>\r\n                </div>\r\n             </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport './style.css';\r\nimport GameBar from '../GameBar/gamebar';\r\nimport Tower from '../Tower/tower';\r\nimport { start } from 'repl';\r\nconst api = require('../../util/api');\r\n\r\ninterface GameProps {\r\n    towerName: string,\r\n}\r\n\r\n// 'HelloProps' describes the shape of props.\r\n// State is never set so we use the '{}' type.\r\nexport default class Game extends React.Component<GameProps, {}> {\r\n    state = {\r\n        money: 100000,\r\n        towerName: this.props.towerName,\r\n        starLevel: 1,\r\n        happiness: 50,\r\n        population: 0,\r\n        availableRoomTypes: new Set<string>(),\r\n    }\r\n\r\n    updateGameState = async () => {\r\n        let pop = await api.getPopulation(this.state.towerName);\r\n        let money = await api.getMoney(this.state.towerName);\r\n        console.log(pop.data);\r\n        let newStarLevel = this.getStarLevel(pop.data);\r\n        let roomsAvailable = this.getAvailableRooms(newStarLevel);\r\n        this.setState({ population: pop.data, money: money.data, starLevel: newStarLevel, availableRoomTypes: roomsAvailable})\r\n    }\r\n\r\n    getAvailableRooms(starLevel: number){\r\n        let availableRoomTypes = new Set<string>();\r\n\r\n        availableRoomTypes.add(\"apartment\");\r\n        availableRoomTypes.add(\"office\");\r\n\r\n        if(starLevel > 1){\r\n            availableRoomTypes.add(\"condo\");\r\n            availableRoomTypes.add(\"restaurant\");\r\n        }\r\n        if(starLevel > 2){\r\n            availableRoomTypes.add(\"hotel\");\r\n            availableRoomTypes.add(\"cleaning\");\r\n        }\r\n        if(starLevel > 3){\r\n            availableRoomTypes.add(\"test\");\r\n        }\r\n        if(starLevel > 4){\r\n           // availableRoomTypes.push(\"condo\",\"restaurant\");\r\n        }\r\n\r\n        return availableRoomTypes;\r\n    }\r\n\r\n    getStarLevel(population: number){\r\n        let starLevel = 1;\r\n        if(population > 200){\r\n            \r\n            starLevel = 2;\r\n        }\r\n\r\n        if(population > 500){\r\n            starLevel = 3;\r\n        }\r\n        if(population > 1000){\r\n            starLevel = 4;\r\n        }\r\n        if(population > 2000){\r\n            starLevel = 5;\r\n        }\r\n\r\n        return starLevel;\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        //get game state from DB/API\r\n        this.updateGameState();\r\n    }\r\n\r\n    endMonth = async () => {\r\n        let newMoney = await api.endMonth(this.state.towerName);\r\n        let newState = await this.updateGameState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <GameBar gameState={this.state} endMonthHandler={this.endMonth}></GameBar>\r\n                <Tower availableRoomTypes={this.state.availableRoomTypes} name={this.state.towerName} updateGameState={this.updateGameState} />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Game from './components/Game/game';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game towerName=\"demoeleven\">\r\n      </Game>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}