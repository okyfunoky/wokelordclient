{"version":3,"sources":["util/api.js","components/GameBar/gamebar.tsx","components/Room/room.tsx","components/RoomBuildButton/roombuildbutton.tsx","components/RoomBuildMenu/roombuildmenu.tsx","components/NewRoomButton/NewRoomButton.tsx","components/Floor/floor.tsx","components/NewFloorButton/NewFloorButton.tsx","components/Elevator/elevator.tsx","components/Tower/tower.tsx","components/Game/game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["url","buildFloor","towerName","floorNumber","console","log","parseInt","axios","getTower","a","getPopulation","getMoney","endMonth","getFloorRooms","floorId","buildRoomOnFloor","roomName","roomType","roomRent","roomMaintenance","roomHappiness","body","maintenance","happiness","rent","GameBar","state","money","className","this","props","gameState","starLevel","population","onClick","endMonthHandler","React","Room","name","tenants","type","length","_id","RoomBuildButton","clickHandler","RoomBuildMenu","NewRoomButton","anchorEl","setAnchorEl","aria-controls","aria-haspopup","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","api","require","Floor","number","rooms","Array","showMenu","toggleMenu","setState","componentDidMount","floor","data","addRoom","newRoomName","newRoomType","newFloor","updateGameState","map","room","NewFloorButton","Elevator","position","Tower","floors","floorsAdded","addFloor","topFloor","newFloors","towerJson","newlyBuiltFloor","forEach","push","handleUpdateGameState","handleAddFloor","res","sort","b","Component","Game","pop","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dadb91f.chunk.js","sourcesContent":["import * as axios from 'axios'\r\nconst url = 'https://wokelordserver.herokuapp.com'\r\n\r\nexport function buildFloor(towerName, floorNumber) {\r\n    console.log(\"Attempting to build a floor...\" + floorNumber);\r\n    floorNumber = parseInt(floorNumber);\r\n    return axios.post(url + `/game/buildfloor/${towerName}/${floorNumber}`)\r\n}\r\n\r\nexport async function getTower(towerName) {\r\n    return axios.get(url + `/game/loadtower/${towerName}`)\r\n}\r\n\r\nexport async function getPopulation(towerName) {\r\n    return axios.get(url + `/game/getpopulation/${towerName}`)\r\n}\r\n\r\nexport async function getMoney(towerName) {\r\n    return axios.get(url + `/game/getmoney/${towerName}`)\r\n}\r\n\r\nexport async function endMonth(towerName) {\r\n    return axios.get(url + `/game/updatemonth/${towerName}`)\r\n}\r\n\r\nexport async function getFloorRooms(floorId) {\r\n    return axios.get(url + `/game/loadrooms/${floorId}`);\r\n}\r\n\r\nexport function buildRoomOnFloor(towerName, floorId, roomName, roomType, roomRent, roomMaintenance, roomHappiness) {\r\n    let body = {\r\n        roomName: roomName,\r\n        roomType: roomType,\r\n        maintenance: roomMaintenance,\r\n        happiness: roomHappiness,\r\n        rent: roomRent,\r\n    }\r\n    return (\r\n        axios.post(url + `/game/buildroom/${towerName}/${floorId}`, body)\r\n    );\r\n}","import * as React from 'react';\r\nimport './style.css';\r\n\r\nexport interface GamebarProps {\r\n    gameState: {\r\n        money: number,\r\n        population: number,\r\n        happiness: number,\r\n        starLevel: number,\r\n    },\r\n    endMonthHandler: any\r\n}\r\n\r\n// 'HelloProps' describes the shape of props.\r\n// State is never set so we use the '{}' type.\r\nexport default class GameBar extends React.Component<GamebarProps, {}> {\r\n    state = {\r\n        money: 0\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"gamebar\">\r\n                <div className=\"money gamebarItem\">\r\n                    <span>Funds: </span>\r\n                    {this.props.gameState.money}\r\n                </div>\r\n                <div className=\"happiness gamebarItem\">\r\n                    <span>Happiness: </span>\r\n                    {this.props.gameState.happiness}\r\n                </div>\r\n                <div className=\"gamebarItem\">\r\n                    <span>Star Level: </span>\r\n                    {this.props.gameState.starLevel}\r\n                </div>\r\n                <div className=\"gamebarItem\">\r\n                    <span>Population: </span>\r\n                    {this.props.gameState.population}\r\n                </div>\r\n                <button onClick={this.props.endMonthHandler}>Proceed to Next Month</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport './style.css';\r\n\r\nexport interface RoomProps { \r\n    name: string,\r\n    tenants: any[],\r\n    floorId: string,\r\n    type: string,\r\n    _id: string,\r\n    rent: number,\r\n    maintenance: number,\r\n    happiness: number,\r\n }\r\n\r\n// 'HelloProps' describes the shape of props.\r\n// State is never set so we use the '{}' type.\r\nexport default class Room extends React.Component<RoomProps, {}> {\r\n    state = {\r\n        name: this.props.name,\r\n        tenants: this.props.tenants,\r\n        type: this.props.type,\r\n        rent: this.props.rent,\r\n        maintenance: this.props.maintenance,\r\n        happiness: this.props.happiness\r\n\r\n    }\r\n    \r\n    render() {\r\n        return <div className={this.props.type}>{this.state.name} is a {this.state.type} and has {this.state.tenants.length} tenants. ID is {this.props._id}</div>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\ninterface RoomBuildButtonProps {\r\n  clickHandler: any\r\n  roomType: string,\r\n  roomName: string,\r\n}\r\n\r\nconst RoomBuildButton: React.FC<RoomBuildButtonProps> = (props) => {\r\n  return (\r\n    <button onClick={()=> props.clickHandler(props.roomName, props.roomType)}>{props.roomType}</button>\r\n  );\r\n}\r\n\r\nexport default RoomBuildButton;\r\n","import React from 'react';\r\nimport RoomBuildButton from '../RoomBuildButton/roombuildbutton'\r\nimport './style.css';\r\n\r\ninterface RoomBuildMenuProps {\r\n    clickHandler: any\r\n}\r\n\r\nconst RoomBuildMenu: React.FC<RoomBuildMenuProps> = (props) => {\r\n\r\nreturn (\r\n    <div className=\"RoomBuildMenu\">\r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"office\"} roomName=\"Foo\"></RoomBuildButton>\r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"apartment\"} roomName=\"Foo\"></RoomBuildButton>\r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"entertainment\"} roomName=\"Foo\"></RoomBuildButton>\r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"restaurant\"} roomName=\"Foo\"></RoomBuildButton>\r\n        <RoomBuildButton clickHandler={props.clickHandler} roomType={\"condo\"} roomName=\"Foo\"></RoomBuildButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoomBuildMenu;\r\n","import * as React from 'react';\r\nimport './style.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport RoomBuildMenu from '../RoomBuildMenu/roombuildmenu';\r\n\r\ninterface NewRoomButtonProps {\r\n    clickHandler: any\r\n}\r\n\r\nconst NewRoomButton: React.FC<NewRoomButtonProps> = (props) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event: any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"newRoomButton\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n        Build Rooms\r\n      </button>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n          <RoomBuildMenu clickHandler={props.clickHandler}></RoomBuildMenu>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewRoomButton;","import * as React from 'react';\r\nimport Room from '../Room/room';\r\nimport NewRoomButton from \"../NewRoomButton/NewRoomButton\";\r\nimport './style.css';\r\nimport { Modal, Dialog, DialogTitle, DialogContent, MenuItem, Menu } from '@material-ui/core';\r\nimport { throwStatement } from '@babel/types';\r\nconst api = require('../../util/api');\r\n\r\nexport interface FloorProps {\r\n    number: number;\r\n    _id: string,\r\n    towerName: string,\r\n    updateGameState: any\r\n}\r\n\r\n// State is never set so we use the '{}' type.\r\nexport default class Floor extends React.Component<FloorProps, {}> {\r\n    state = {\r\n        number: this.props.number,\r\n        rooms: Array<any>(),\r\n        _id: this.props._id,\r\n        showMenu: false,\r\n    }\r\n\r\n    toggleMenu = () => {\r\n        if (this.state.showMenu) {\r\n            this.setState({ showMenu: false })\r\n        } else {\r\n            this.setState({ showMenu: true })\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        let floor = await api.getFloorRooms(this.state._id);\r\n        console.log(\"Rooms Obj\");\r\n        console.log(floor);\r\n        this.setState({ rooms: floor.data[0].rooms });\r\n    }\r\n\r\n    addRoom = async (newRoomName: string, newRoomType: string) => {\r\n        let newRoomRent = 0;\r\n        let newRoomMaintenance = 0;\r\n        let newRoomHappiness = 0;\r\n        let newFloor = await api.buildRoomOnFloor(this.props.towerName, this.state._id, newRoomName, newRoomType, newRoomRent, newRoomMaintenance, newRoomHappiness);\r\n        console.log(newFloor);\r\n        let floor = await api.getFloorRooms(this.state._id);\r\n        console.log(\"New Floor Obj\");\r\n        console.log(floor);\r\n        this.setState({ rooms: floor.data[0].rooms });\r\n        this.props.updateGameState();\r\n    }\r\n\r\n    render() {\r\n        const menuClassName = this.state.showMenu ? \"displayMenu\" : \"hideMenu\"\r\n\r\n\r\n        return (\r\n            <div className=\"floor\">\r\n\r\n                {this.state.rooms.map((room) => {\r\n                    return (\r\n                        <Room\r\n                            name={room.name}\r\n                            type={room.type}\r\n                            tenants={room.tenants}\r\n                            floorId={this.state._id}\r\n                            _id={room._id}\r\n                            happiness={room.happiness}\r\n                            rent={room.rent}\r\n                            maintenance={room.maintenance}\r\n                        />\r\n                    )\r\n                })}\r\n                <NewRoomButton clickHandler={this.addRoom}></NewRoomButton>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport './style.css'\r\n\r\ninterface NewFloorProps {\r\n    onClick(): any\r\n}\r\n\r\nconst NewFloorButton: React.FC<NewFloorProps> = (props) => {\r\n\r\n    return (\r\n\r\n        <button className=\"newFloorButton\" onClick={props.onClick}>\r\n            <span className=\"tooltiptext\">Click to build a new floor $</span>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default NewFloorButton;","import React from 'react';\r\nimport './style.css';\r\n\r\ninterface ElevatorProps {\r\n  clickHandler: any\r\n  position: string,\r\n}\r\n\r\nconst Elevator: React.FC<ElevatorProps> = (props) => {\r\n  \r\n    return (\r\n    <div className={props.position===\"left\" ? \"leftElevator\" : \"rightElevator\"}></div>\r\n  );\r\n}\r\n\r\nexport default Elevator;\r\n","import React, { Component, useContext } from \"react\";\r\nimport Floor from '../Floor/floor';\r\nimport newFloorButton from '../NewFloorButton/NewFloorButton'\r\nimport './style.css';\r\nimport NewFloorButton from \"../NewFloorButton/NewFloorButton\";\r\nimport Elevator from \"../Elevator/elevator\"\r\nconst api = require('../../util/api');\r\n\r\nexport interface TowerProps {\r\n    name: string,\r\n    updateGameState: any\r\n}\r\n\r\nexport default class Tower extends React.Component<TowerProps> {\r\n    state = {\r\n        floors: Array<any>(),\r\n        name: this.props.name,\r\n        money: 0,\r\n        floorsAdded: false,\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //callDB\r\n        let res = await api.getTower(this.state.name);\r\n\r\n        let newFloors = Array<any>();\r\n\r\n        if (res.data[0].floors) {\r\n            console.log(res.data[0].floors);\r\n            res.data[0].floors.forEach((floor: any) => {\r\n                newFloors.push(floor);\r\n            });\r\n        }\r\n        console.log(newFloors);\r\n\r\n        newFloors = newFloors.sort((a,b)=>{\r\n            return a.number - b.number;\r\n        })\r\n        console.log(newFloors);\r\n\r\n        this.setState({ floors: newFloors })\r\n    }\r\n\r\n    addFloor = async () => {\r\n        console.log(this.state.floors.length)\r\n        let topFloor: any = this.state.floors[this.state.floors.length - 1];\r\n        console.log(topFloor)\r\n        let newFloor;\r\n        if (topFloor) {\r\n            newFloor = topFloor.number + 1;\r\n        } else {\r\n            newFloor = 0;\r\n        }\r\n\r\n        let newFloors = Array<number>();\r\n        let towerJson = await api.buildFloor(this.state.name, newFloor);\r\n        console.log(\"Tower Json...\")\r\n        console.log(towerJson);\r\n\r\n        let newlyBuiltFloor = towerJson.data.floors[towerJson.data.floors.length-1];\r\n        console.log(newlyBuiltFloor)\r\n        this.state.floors.forEach((floor) => {\r\n            newFloors.push(floor);\r\n        })\r\n\r\n        newFloors.push(newlyBuiltFloor);\r\n        this.handleUpdateGameState();\r\n        this.setState({ floors: newFloors });\r\n    }\r\n\r\n    handleAddFloor = () => {\r\n        console.log(this)\r\n        this.addFloor();\r\n    }\r\n\r\n    handleUpdateGameState(){\r\n        this.props.updateGameState();\r\n    }\r\n\r\n    render() {\r\n        let testRooms = [\"Office\", \"Appartment\", \"Restaurant\", \"Gym\"]\r\n        return (\r\n            <div className=\"outerTower\">\r\n                <NewFloorButton onClick={this.addFloor}></NewFloorButton>\r\n                <div className=\"innerTower\">\r\n                    <Elevator position=\"left\" clickHandler={() => { }}></Elevator>\r\n                    <div className=\"floors\">\r\n                        {this.state.floors.map((floor) => {\r\n                            return <Floor number={floor.number} _id={floor._id} towerName={this.state.name} updateGameState={this.props.updateGameState}></Floor>\r\n                        })}\r\n                    </div>\r\n                    <Elevator position=\"right\" clickHandler={() => { }}></Elevator>\r\n                </div>\r\n             </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport './style.css';\r\nimport GameBar from '../GameBar/gamebar';\r\nimport Tower from '../Tower/tower';\r\nconst api = require('../../util/api');\r\n\r\ninterface GameProps {\r\n    towerName: string,\r\n}\r\n\r\n// 'HelloProps' describes the shape of props.\r\n// State is never set so we use the '{}' type.\r\nexport default class Game extends React.Component<GameProps, {}> {\r\n    state = {\r\n        money: 100000,\r\n        towerName: this.props.towerName,\r\n        starLevel: 1,\r\n        happiness: 50,\r\n        population: 0,\r\n    }\r\n\r\n    updateGameState = async () => {\r\n        let pop = await api.getPopulation(this.state.towerName);\r\n        let money = await api.getMoney(this.state.towerName);\r\n        console.log(pop.data);\r\n        this.setState({ population: pop.data, money: money.data })\r\n    }\r\n\r\n    componentDidMount() {\r\n        //get game state from DB/API\r\n        this.updateGameState();\r\n    }\r\n\r\n    endMonth = async () => {\r\n        let newMoney = await api.endMonth(this.state.towerName);\r\n        let newState = await this.updateGameState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <GameBar gameState={this.state} endMonthHandler={this.endMonth}></GameBar>\r\n                <Tower name={this.state.towerName} updateGameState={this.updateGameState} />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Game from './components/Game/game';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game towerName=\"demoten\">\r\n      </Game>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}